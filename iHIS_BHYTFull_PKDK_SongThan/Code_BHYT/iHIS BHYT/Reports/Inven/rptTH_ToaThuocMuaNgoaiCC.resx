<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbImage.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAXgBeAAD/4QByRXhpZgAATU0AKgAAAAgABQESAAMAAAABAAEAAAEaAAUAAAAB
        AAAASgEbAAUAAAABAAAAUgEoAAMAAAABAAMAAAExAAIAAAAQAAAAWgAAAAAAAJOjAAAD6AAAk6MAAAPo
        cGFpbnQubmV0IDQuMC45AP/bAEMAAgEBAgEBAgICAgICAgIDBQMDAwMDBgQEAwUHBgcHBwYHBwgJCwkI
        CAoIBwcKDQoKCwwMDAwHCQ4PDQwOCwwMDP/bAEMBAgICAwMDBgMDBgwIBwgMDAwMDAwMDAwMDAwMDAwM
        DAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDP/AABEIAJIAhQMBIgACEQEDEQH/xAAfAAAB
        BQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYT
        UWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFla
        Y2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK
        0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJ
        Cgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEK
        FiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeI
        iYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T1
        9vf4+fr/2gAMAwEAAhEDEQA/AP38ooooAKKKju7uKwtJJ55I4YYUMkkjsFVFAySSeAAOc0ASVBqep2+i
        6bcXl5PFa2tnE0080rBUiRQSzMTwAACST0Ar5w+Fv/BSbT/i54mt9Q0/wD4utPhPfSvBafETUZLWy0e4
        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
        AooooAKKKKAP/9k=
</value>
  </data>
  <data name="$this.DataSourceSchema" xml:space="preserve">
    <value>&lt;?xml version="1.0"?&gt;
&lt;xs:schema id="Result" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;
  &lt;xs:element name="Result" msdata:IsDataSet="true" msdata:UseCurrentLocale="true" msdata:EnforceConstraints="False"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
        &lt;xs:element name="Table1"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:element name="ClinicCode" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="ClinicName" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="ClinicAddress" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="Province" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="Phone" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="Mobile" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="Doctor" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="WorkingDateLine01" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="WorkingDateLine02" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="WorkingDateLine03" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="KCBBDCode" type="xs:string" minOccurs="0" /&gt;
            &lt;/xs:sequence&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
        &lt;xs:element name="Table2"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:element name="MedicalRecordCode" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="DiagnosisCode" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="DiagnosisName" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="PatientName" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="PatientAge" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="PatientBirthyear" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="PatientGenderName" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="PatientAddress" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="ObjectCode" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="ObjectName" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="AdvicesName" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="EmployeeName" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="TackleName" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="DepartmentName" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="ICD10KT" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="AppointmentDate" type="xs:string" minOccurs="0" /&gt;
            &lt;/xs:sequence&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
        &lt;xs:element name="Table3"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:element name="MedicalRecordCode" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="ItemCode" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="ItemName" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="DateOfIssues" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="Morning" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="Noon" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="Afternoon" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="Evening" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="Quantity" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="Instruction" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="UnitPrice" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="SalesPrice" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="RateBHYT" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="Amount" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="UnitOfMeasureName" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="BHYTPrice" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="Status" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="RepositoryCode" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="RepositoryName" type="xs:string" minOccurs="0" /&gt;
            &lt;/xs:sequence&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
      &lt;/xs:choice&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
&lt;/xs:schema&gt;</value>
  </data>
</root>